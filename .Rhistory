theme(axis.text.y = element_text(size = 14))
# Plot for raw data relationship
ggplot(comb[!is.na(rich) & !is.na(live_mass),],
aes(x=rich,
y=live_mass)) +
geom_smooth(method="lm", se=T) +
theme_bw() +
geom_point()
# Plots for log-log models - punchline
# Cross-sectional analog
ggplot(comb[!is.na(log.rich) & !is.na(log.live_mass),],
aes(x=log.rich,
y=log.live_mass)) +
geom_smooth(method="lm", se=T) +
theme_bw() +
geom_point()
# Plot FE only
ggplot(comb[!is.na(change.log.rich) & !is.na(change.log.live_mass),],
aes(x=change.log.rich,
y=change.log.live_mass)) +
geom_smooth(method="lm", se=F) +
theme_bw() +
geom_point()
# Plot FE only
ggplot(comb[!is.na(change.log.rich) & !is.na(change.log.live_mass),],
aes(x=change.log.rich,
y=change.log.live_mass)) +
geom_smooth(method="lm", se=F) +
theme_bw() +
geom_point()
# Panel analog (plot FE and site-year effects)
ggplot(comb[!is.na(dm.change.log.rich) & !is.na(dm.change.log.live_mass),],
aes(x=dm.change.log.rich,
y=dm.change.log.live_mass)) +
geom_smooth(method="lm", se=F) +
theme_bw() +
geom_point()
# Cross-sectional analog
ggplot(comb[!is.na(log.rich) & !is.na(log.live_mass),],
aes(x=log.rich,
y=log.live_mass)) +
geom_smooth(method="lm", se=T) +
theme_bw() +
geom_point()
# Plot FE only
ggplot(comb[!is.na(change.log.rich) & !is.na(change.log.live_mass),],
aes(x=change.log.rich,
y=change.log.live_mass)) +
geom_smooth(method="lm", se=F) +
theme_bw() +
geom_point()
# Panel analog (plot FE and site-year effects)
ggplot(comb[!is.na(dm.change.log.rich) & !is.na(dm.change.log.live_mass),],
aes(x=dm.change.log.rich,
y=dm.change.log.live_mass)) +
geom_smooth(method="lm", se=F) +
theme_bw() +
geom_point()
# Cross-sectional analog
ggplot(comb[!is.na(log.rich) & !is.na(log.live_mass),],
aes(x=log.rich,
y=log.live_mass)) +
geom_smooth(method="lm", se=T) + labs(y = "log(Live biomass)") + labs(x = "log(Richness)") +
theme_bw() +
geom_point()
ggplot(comb[!is.na(log.rich) & !is.na(log.live_mass),],
aes(x=log.rich,
y=log.live_mass)) +
geom_smooth(method="lm", se=T) + labs(y = "log(Live biomass)") + labs(x = "log(Richness)") +
theme_bw() +
geom_point()
# Plot FE only
ggplot(comb[!is.na(change.log.rich) & !is.na(change.log.live_mass),],
aes(x=change.log.rich,
y=change.log.live_mass)) + labs(y = "log(Live biomass)") + labs(x = "log(Richness)") +
geom_smooth(method="lm", se=F) +
theme_bw() +
geom_point()
# Panel analog (plot FE and site-year effects)
ggplot(comb[!is.na(dm.change.log.rich) & !is.na(dm.change.log.live_mass),],
aes(x=dm.change.log.rich,
y=dm.change.log.live_mass)) + labs(y = "log(Live biomass)") + labs(x = "log(Richness)") +
geom_smooth(method="lm", se=F) +
theme_bw() +
geom_point()
# Plot histogram of average richness by site
variation.histogram.plot = ggplot(comb[,mean(rich, na.rm=T), by=plot],
aes(x=V1-11, y=..ncount..)) +
geom_histogram(binwidth=1, fill='gray') +
geom_histogram(data=comb, fill="black",
aes(x=changerich, y= -..ncount..),
binwidth=1) +
theme_bw() +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks = element_blank(),
axis.title = element_text(size=18)) +
geom_text(aes(label="Cross-sectional differences",x=10, y=0.75), size=6) +
geom_text(aes(label="Temporal differences",x=10, y=-0.75), size=6) +
xlab("") +
ylab("Normalized count")
pdf("cross_vs_time_variation_histograms.pdf", width=8, height=8)
variation.histogram.plot
dev.off()
######
# Decompose variation from one plot --- *****THESE FIGURES FOR THE TUTORIAL! *****
######
comb[,singledm.log.live_mass:=log.live_mass-mean(log.live_mass, na.rm=T), by=.(site, plot)]
comb[,doubledm.log.live_mass:=singledm.log.live_mass-mean(singledm.log.live_mass, na.rm=T), by=.(site, year)]
# plot raw variation - no fixed effects
ggplot(comb[(site=="sedg.us" & plot %in% c("1","17")) | (site=="sevi.us" & plot %in% c("8","12")),],
aes(x=year, y=log.live_mass, group=plot, linetype=plot, color = site)) +
geom_line() +   scale_color_manual(values=c('#999999','#E69F00')) +
ggtitle("Raw Variation in log(live biomass)") +
theme_bw() +
ylim(c(-1,7)) + labs(y = "log(Live biomass)") +  labs(x = "Year") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
## why does this look different?
ggplot(comb[site=="sedg.us" & plot %in% c("1","17") | (site=="sevi.us" & plot %in% c("8","12")), ],
aes(x=year, y=singledm.log.live_mass, group=plot, linetype=plot, color = site)) +
geom_line() +    scale_color_manual(values=c('#999999','#E69F00')) +
ggtitle("Variation in log(live biomass) after removing plot fixed effects") +
theme_bw() +
ylim(c(-5,7)) + labs(y = "log(Live biomass)") +  labs(x = "Year") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
#Realized richness analyses of BioCon
# Laura update Dec 16 2020; checked by Kaitlin Kimmel and Tim O.
rm(list=ls())
#Close graphics windows
graphics.off()
#biocon data downloaded in Nov? 2020
library(tidyr)
library(here)
library(data.table)
library(fixest)  # to run econometric fixed effect models
require(ggplot2)
library(texreg)
library(here)
# When log(0) need to use inverse hyperbolic sine transformation (REF NEEDED)
#https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Inverse_hyperbolic_sine
ihs = function(x) {
return(log(x + sqrt(x^2+1)))
} # v.s. log(x+1) <- is defined for a negative x.
## it is generally frowned upon, when taking the log, to add small numbers (e.g., log(richness + 0.01))
### LOAD DATA ##########
#processed by Kaitlin on Dec 16 2020; KK used the biomass files for richness and biomass to be consistent with BigBio.
setwd("~/Documents/GitHub/NutNetCausalinf/code/r/SMSection8_CedarCreekAnalyses/data/")
findat <-  fread("biocon_plantedbiomass_output.csv")
# findat <-  fread(here::here("code", "r", "SMSection8_CedarCreekAnalyses","data","biocon_plantedbiomass_output.csv"))
### variables for analysis:
# The TreatmentSR column = treatment level of spp
# The ObservedSR = observed species based on what was planted in the plot
# Live.mass = biomass
################################################################################
## Process data to prep for models ### #########################################
###############################################################################
findat$Plot <- as.factor(findat$Plot)
findat$Year <- as.factor(findat$Year)
#whats the sample size
table(findat$Year)
#check for any NAs or 0s for Biomass or SR
table(findat$ObservedSR)
table(findat$TreatmentSR)
summary(findat$live.mass)
#plot richness
hist(findat$ObservedSR)
hist(findat$TreatmentSR)
#Check that we have created a VARIABLE FOR  OF THE SPECIES PLANTED,
# WHICH AND HOW MANY COME UP AND ARE MEASURED IN PLANTED BIOMASS
table(findat[TreatmentSR=="1", ObservedSR])  # this should be 1 and 0
############################################################################################################
## Plot Data ###############################################################################################
############################################################################################################
## plot the raw realized richness over time, at each richness level - color the points by planted richness level
plot(findat$Year, findat$ObservedSR)
plot(findat$TreatmentSR, findat$ObservedSR, main = "BioCon Planted versus Realized Richness", xlab = "Planted Richness Levels", ylab = "Realized Richness")
hist(findat$live.mass, main = "Live biomass of planted species")
# species richness in the plots can go down but not up due to weeding of species colonizating the plot
realrichovertime <- ggplot(findat, aes(x = Year, y = ObservedSR)) + facet_wrap(~TreatmentSR) +
theme_bw() +
geom_point()+  labs(y = "Realized Planted Species Richness over time") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
realrichovertime
## plot realized richness over time, for each treatment - color the points by planted richness level
realrichovertime.T <- ggplot(findat, aes(x = Year, y = ObservedSR, colour= TreatmentSR))   + # + facet_wrap(~Trt) +
theme_bw() +
geom_point() +  labs(y = "Realized Planted Species Richness over time") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
realrichovertime.T
############################################################################################################################
### Do two-way fixed fffects Analyses using lfe package - see Section SM S8 ######################################################
##############################################################################################################################
#ihs transformed because some of the live.mass is 0. Though how is this possible?
# also we do this because of support for this relation (the effect of SR on productivity) to follow a power relationship,
# or a saturating relationship, see:
#  Reich,  et al. (2012). Impacts of biodiversity loss escalate through time as redundancy fades. Science, 336, 589–92.
#  Cardinale, B.J., et al. (2011). The functional role of producer diversity in ecosystems. Am. J. Bot., 98, 572–592.
biocon.mod  <- feols(ihs(live.mass) ~ ihs(ObservedSR)  | Year + Plot,  findat, cluster = "Plot")
###########################################
#### Print Results for Table S16 ##########
###########################################
esttex(biocon.mod,
coefstat = "se",  replace = TRUE,
file = "Table_S16_R_se.tex")
esttex(biocon.mod,
coefstat = "conf",  replace = TRUE,
file = "Table_S16_R_ci.tex")
rm(list=ls())
#Close graphics windows
graphics.off()
#biocon data downloaded in Nov? 2020
library(tidyr)
library(here)
library(data.table)
library(fixest)  # to run econometric fixed effect models
require(ggplot2)
library(texreg)
library(here)
# When log(0) need to use inverse hyperbolic sine transformation (REF NEEDED)
#https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Inverse_hyperbolic_sine
ihs = function(x) {
return(log(x + sqrt(x^2+1)))
} # v.s. log(x+1) <- is defined for a negative x.
## it is generally frowned upon, when taking the log, to add small numbers (e.g., log(richness + 0.01))
### LOAD DATA ##########
#processed by Kaitlin on Dec 16 2020; KK used the biomass files for richness and biomass to be consistent with BigBio.
setwd("~/Documents/GitHub/NutNetCausalinf/code/r/SMSection8_CedarCreekAnalyses/data/")
findat <-  fread("biocon_plantedbiomass_output.csv")
#processed by Kaitlin on Dec 16 2020; KK used the biomass files for richness and biomass to be consistent with BigBio.
setwd("~/Documents/GitHub/NutNetCausalinf/code/r/SMSection10_CedarCreekAnalyses/data/")
findat <-  fread("biocon_plantedbiomass_output.csv")
# findat <-  fread(here::here("code", "r", "SMSection8_CedarCreekAnalyses","data","biocon_plantedbiomass_output.csv"))
### variables for analysis:
# The TreatmentSR column = treatment level of spp
# The ObservedSR = observed species based on what was planted in the plot
# Live.mass = biomass
################################################################################
## Process data to prep for models ### #########################################
###############################################################################
findat$Plot <- as.factor(findat$Plot)
findat$Year <- as.factor(findat$Year)
#whats the sample size
table(findat$Year)
#check for any NAs or 0s for Biomass or SR
table(findat$ObservedSR)
table(findat$TreatmentSR)
summary(findat$live.mass)
#plot richness
hist(findat$ObservedSR)
hist(findat$TreatmentSR)
#Check that we have created a VARIABLE FOR  OF THE SPECIES PLANTED,
# WHICH AND HOW MANY COME UP AND ARE MEASURED IN PLANTED BIOMASS
table(findat[TreatmentSR=="1", ObservedSR])  # this should be 1 and 0
############################################################################################################
## Plot Data ###############################################################################################
############################################################################################################
## plot the raw realized richness over time, at each richness level - color the points by planted richness level
plot(findat$Year, findat$ObservedSR)
plot(findat$TreatmentSR, findat$ObservedSR, main = "BioCon Planted versus Realized Richness", xlab = "Planted Richness Levels", ylab = "Realized Richness")
hist(findat$live.mass, main = "Live biomass of planted species")
# species richness in the plots can go down but not up due to weeding of species colonizating the plot
realrichovertime <- ggplot(findat, aes(x = Year, y = ObservedSR)) + facet_wrap(~TreatmentSR) +
theme_bw() +
geom_point()+  labs(y = "Realized Planted Species Richness over time") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
realrichovertime
## plot realized richness over time, for each treatment - color the points by planted richness level
realrichovertime.T <- ggplot(findat, aes(x = Year, y = ObservedSR, colour= TreatmentSR))   + # + facet_wrap(~Trt) +
theme_bw() +
geom_point() +  labs(y = "Realized Planted Species Richness over time") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
realrichovertime.T
############################################################################################################################
### Do two-way fixed fffects Analyses using lfe package - see Section SM S8 ######################################################
##############################################################################################################################
#ihs transformed because some of the live.mass is 0. Though how is this possible?
# also we do this because of support for this relation (the effect of SR on productivity) to follow a power relationship,
# or a saturating relationship, see:
#  Reich,  et al. (2012). Impacts of biodiversity loss escalate through time as redundancy fades. Science, 336, 589–92.
#  Cardinale, B.J., et al. (2011). The functional role of producer diversity in ecosystems. Am. J. Bot., 98, 572–592.
biocon.mod  <- feols(ihs(live.mass) ~ ihs(ObservedSR)  | Year + Plot,  findat, cluster = "Plot")
###########################################
#### Print Results for Table S16 ##########
###########################################
esttex(biocon.mod,
coefstat = "se",  replace = TRUE,
file = "Table_S16_R_se.tex")
esttex(biocon.mod,
coefstat = "conf",  replace = TRUE,
file = "Table_S16_R_ci.tex")
# #######################################################################
##########################################################################
rm(list = ls())
# Define project directory
# cdir <- "C:/GitHub/NutNetCausalinf/"
# setwd(cdir)
setwd("~/Documents/GitHub/NutNetCausalinf/")
######################################################
## BELOW THIS POINT, code should just run ##
# load packages; version numbers are noted for each package used.
require(ggplot2) # 3.3.3
library(plyr) # 1.8.6
library(data.table) # v 1.13.6
library(AER) # v 1.2-9 ### Do we use this anymore???
library(sandwich) #3.0-0
library(foreign) # 0.8-80
library(car)  #v  3.0-10
library(fixest)  # v 0.8.2
library(lme4)  # 1.1-26
library(texreg) # 1.37. 5  #### Do we use this anymore???
library(broom)  # v 0.7.4
library(tidyverse)  # v 1.3.0
library(RColorBrewer) #1.1-2
library(cowplot) # 1.1.1
library(corrplot)  # 0.84
library(gridExtra)
###  *** Need to run ***
### purpose built functions
source("./code/r/useful_functions.R")
##########################################
## Analysis using small complete data ####
combonly <- TRUE  # combonly -> finalprocess_and_datachecks
comb <- fread("./data/processed/NutNetControlPlotData_v201804.csv",na.strings='NA')
source("./code/r/finalprocess_and_datachecks.R") ## Produces Table S1
#############################################
##############################################
##############################################
## Models for Figure 2A and Table S2
MainMod_Rich     <- feols(log(live_mass) ~ log(rich)  | newplotid + site.by.yeardummy, comb)
MainMod_Rich_sitecluster  <- feols(log(live_mass) ~ log(rich)  | newplotid + site.by.yeardummy, comb, cluster = "site_code")
MainMod_RichEven <- feols(log(live_mass) ~ log(rich) + ihs(even) | newplotid + site.by.yeardummy, comb)
MainMod_Simpson  <- feols(log(live_mass) ~ log(simpson) | newplotid + site.by.yeardummy, comb)
MainMod_RichLag  <- feols(log(live_mass) ~ log(rich) + log(laggedrich) | newplotid + site.by.yeardummy, comb)
MainMod_RichEvenLag <- feols(log(live_mass) ~ log(rich) + log(laggedrich) + ihs(even) | newplotid + site.by.yeardummy, comb)
Fig2A.1 <- tidy(MainMod_Rich) %>%
filter(term == "log(rich)")
Fig2A.2 <- tidy(MainMod_RichEven) %>%
filter(term == "log(rich)")
Fig2A.3 <- tidy(MainMod_Simpson) %>%
filter(term == "log(simpson)")
MixedMod_Rich <- lmer(log(live_mass) ~ log(rich) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
MixedMod_RichEven <- lmer(log(live_mass) ~ log(rich) + ihs(even) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
MixedMod_Simpson <- lmer(log(live_mass) ~ log(simpson) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
#  Bivariate and Common Multivariate Analyses Models
SimpleRE_TwoVar <- lmer(log(live_mass) ~ log(rich) + as.factor(year) + (1|newplotid), comb, REML = F)
SimpleRE_MultiVar <- lmer(log(live_mass) ~ log(rich) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid), comb, REML = F)
## CS: Because I couldn't find heteroskedasticity and autocorrelation robust variances with lme4, let's
## read in these more conservative CIs from stata to adjust
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
Fig2B.2 <- tidy(MixedMod_RichEven) %>%
filter(term == "log(rich)")
Fig2B.3 <- tidy(MixedMod_Simpson) %>%
filter(term == "log(simpson)")
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
MixedMod_Rich
?filter
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
MixedMod_Rich <- lmer(log(live_mass) ~ log(rich) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
MixedMod_Rich <- lmer(log(live_mass) ~ log(rich) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
MixedMod_Rich
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
install.packages(c("tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse"))
Fig2B.1 <- tidy(MixedMod_Rich)
Fig2B.1
tidy(MixedMod_Rich)
?tidy
tidy(MixedMod_Rich)
MixedMod_Rich <- lmer(log(live_mass) ~ log(rich) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
MixedMod_RichEven <- lmer(log(live_mass) ~ log(rich) + ihs(even) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
MixedMod_Simpson <- lmer(log(live_mass) ~ log(simpson) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
#  Bivariate and
rm(list = ls())
# Define project directory
# cdir <- "C:/GitHub/NutNetCausalinf/"
# setwd(cdir)
setwd("~/Documents/GitHub/NutNetCausalinf/")
######################################################
## BELOW THIS POINT, code should just run ##
# load packages; version numbers are noted for each package used.
require(ggplot2) # 3.3.3
library(plyr) # 1.8.6
library(data.table) # v 1.13.6
library(AER) # v 1.2-9 ### Do we use this anymore???
library(sandwich) #3.0-0
library(foreign) # 0.8-80
library(car)  #v  3.0-10
library(fixest)  # v 0.8.2
library(lme4)  # 1.1-26
library(texreg) # 1.37. 5  #### Do we use this anymore???
library(broom)  # v 0.7.4
## purpose built functions
source("./code/r/useful_functions.R")
##########################################
## Analysis using small complete data ####
combonly <- TRUE  # combonly -> finalprocess_and_datachecks
comb <- fread("./data/processed/NutNetControlPlotData_v201804.csv",na.strings='NA')
source("./code/r/finalprocess_and_datachecks.R") ## Produces Table S1
MixedMod_Rich <- lmer(log(live_mass) ~ log(rich) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
MixedMod_RichEven <- lmer(log(live_mass) ~ log(rich) + ihs(even) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
MixedMod_Simpson <- lmer(log(live_mass) ~ log(simpson) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid) + (1|site_code), comb, REML = F)
#  Bivariate and Common Multivariate Analyses Models
SimpleRE_TwoVar <- lmer(log(live_mass) ~ log(rich) + as.factor(year) + (1|newplotid), comb, REML = F)
SimpleRE_MultiVar <- lmer(log(live_mass) ~ log(rich) + as.factor(country) + as.factor(habitat) + as.factor(year) +
elevation + managed + burned + grazed + anthropogenic +
TEMP_VAR_v2 + MIN_TEMP_v2 + MAX_TEMP_v2 + TEMP_WET_Q_v2 + TEMP_DRY_Q_v2 + TEMP_WARM_Q_v2 + TEMP_COLD_Q_v2 +
pct_C + pct_N + ppm_P + ppm_K + ppm_Na + ppm_Mg + ppm_S + ppm_Na + ppm_Zn + ppm_Mn + ppm_Fe + ppm_Cu + ppm_B +
pH + PercentSand + PercentSilt + PercentClay +
(1|newplotid), comb, REML = F)
## CS: Because I couldn't find heteroskedasticity and autocorrelation robust variances with lme4, let's
## read in these more conservative CIs from stata to adjust
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
Fig2B.1 <- tidy(MixedMod_Rich)
Fig2B.1()
Fig2B.1
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
library(tidyverse)  # v 1.3.0
library(dbplyr)
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
tidy(MixedMod_Rich)
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
traceback
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
traceback
library(dbplyr)
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
traceback()
?ts
install.packages("broom")
Fig2B.1 <- tidy(MixedMod_Rich) %>%
filter(term == "log(rich)")
